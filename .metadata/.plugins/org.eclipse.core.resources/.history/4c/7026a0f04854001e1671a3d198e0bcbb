#include "xil_exception.h"
#include "xscugic.h"
#include <stdio.h>
#include <string.h>
#include "xaxidma.h"
#include "xparameters.h"
#include "netif/xadapter.h"
#include "platform.h"
#include "platform_config.h"
#include "xil_printf.h"
#include "lwip/tcp.h"
#include "lwip/err.h"
#include "xil_cache.h"
#include "xgpio.h"
#include "sleep.h"
#include "xuartps.h"


#define UART_DEVICE_ID     XPAR_PS7_UART_0_DEVICE_ID      // 0
#define UART_INT_IRQ_ID    XPAR_XUARTPS_0_INTR


#define DMA_DEV_ID          XPAR_AXIDMA_0_DEVICE_ID      // 0  基地址 4040 0000
#define RX_INTR_ID          XPAR_FABRIC_AXIDMA_0_VEC_ID  //  61U  是因为 IRQ_F2P[0] 对应id为61

#define INTC_DEVICE_ID      XPAR_SCUGIC_SINGLE_DEVICE_ID  // 0
#define RESET_TIMEOUT_COUNTER   10000    

#define DDR_BASE_ADDR        XPAR_PS7_DDR_0_S_AXI_BASEADDR   //0x0010 0000    DDR内存控制器的基地址
#define MEM_BASE_ADDR       (DDR_BASE_ADDR + 0x01000000)     //0x0110 0000    在DDR基地址后面偏移了0x01000000(16MB)。 MEM_BASE_ADDR就指向了DDR内存空间的16MB偏移位置。
#define RX_BUFFER_BASE      (MEM_BASE_ADDR + 0x00300000)     //0x0140 0000


#define AXI_GPIO0_DEV_ID	    XPAR_AXI_GPIO_0_DEVICE_ID   // 0
#define DATA_DIRECTION_MASK     0x00000000
#define MAX_PKT_LEN             100      //  100个字节


static void rx_intr_handler(void *callback);
static int  setup_intr_system(XScuGic * int_ins_ptr, XAxiDma * axidma_ptr, u16 rx_intr_id);
int Gpiopl_init(XGpio *InstancePtr, u32 DeviceId, u32 DirectionMask);

static XAxiDma axidma;
static XScuGic intc;

volatile int rx_done;
volatile int error;

void print_app_header();
int  start_application();
void tcp_fasttmr(void);
void tcp_slowtmr(void);

void lwip_init();   //  /* lwIP 中缺少的声明 */


extern volatile int TcpFastTmrFlag;
extern volatile int TcpSlowTmrFlag;
static struct netif server_netif;
struct netif *echo_netif;  // 定义了一个指向 struct netif 类型的指针变量
XGpio Gpio;   // 声明了一个变量 Gpio，该变量的类型是 XGpio
XUartPs Uart_Ps;



void print_ip(char *msg, ip_addr_t *ip){
	print(msg);
	xil_printf("%d.%d.%d.%d\n\r", ip4_addr1(ip), ip4_addr2(ip),	ip4_addr3(ip), ip4_addr4(ip));
}

void print_ip_settings(ip_addr_t *ip, ip_addr_t *mask, ip_addr_t *gw){
	print_ip("Board IP: ", ip);
	print_ip("Netmask : ", mask);
	print_ip("Gateway : ", gw);
}





int uart_init(XUartPs* uart_ps){
    int status;
    XUartPs_Config *uart_cfg;

    uart_cfg = XUartPs_LookupConfig(UART_DEVICE_ID);
    if (NULL == uart_cfg)
        return XST_FAILURE;
    status = XUartPs_CfgInitialize(uart_ps, uart_cfg, uart_cfg->BaseAddress);
    if (status != XST_SUCCESS)
        return XST_FAILURE;

    status = XUartPs_SelfTest(uart_ps);
    if (status != XST_SUCCESS)
        return XST_FAILURE;
    XUartPs_SetOperMode(uart_ps, XUARTPS_OPER_MODE_NORMAL);
    XUartPs_SetBaudRate(uart_ps,115200);
    XUartPs_SetFifoThreshold(uart_ps, 1);
    return XST_SUCCESS;
}

void uart_intr_handler(void *call_back_ref){
    XUartPs *uart_instance_ptr = (XUartPs *) call_back_ref;
    u32 rec_data = 0 ;   // 存储接收到的数据
    u32 isr_status ;     // UART 中断状态

    isr_status = XUartPs_ReadReg(uart_instance_ptr->Config.BaseAddress,XUARTPS_IMR_OFFSET);  // 中断屏蔽寄存器（IMR）
    isr_status &= XUartPs_ReadReg(uart_instance_ptr->Config.BaseAddress,XUARTPS_ISR_OFFSET); // 中断状态寄存器（ISR）

    if (isr_status & (u32)XUARTPS_IXR_RXOVR){   // 是否包含 接收溢出中断标志（XUARTPS_IXR_RXOVR）
        rec_data = XUartPs_RecvByte(XPAR_PS7_UART_0_BASEADDR);  // 从 UART 接收一个字节的数据并将其存储 // 这个函数从设备接收一个字节。它以轮询模式运行，并会一直阻塞，直到接收到一个字节。
        XUartPs_WriteReg(uart_instance_ptr->Config.BaseAddress,XUARTPS_ISR_OFFSET, XUARTPS_IXR_RXOVR) ;  // 清除接收溢出中断标志（XUARTPS_IXR_RXOVR）
    }
    XUartPs_SendByte(XPAR_PS7_UART_0_BASEADDR,rec_data);  // 这个函数使用设备发送一个字节。该函数在轮询模式下运行，会一直阻塞，直到数据被放入TX FIFO寄存器中。
    xil_printf(1);
}

int uart_intr_init(XScuGic *intc, XUartPs *uart_ps){
    int status;
    XScuGic_Config *intc_cfg;
    intc_cfg = XScuGic_LookupConfig(INTC_DEVICE_ID);
    if (NULL == intc_cfg)
        return XST_FAILURE;

    status = XScuGic_CfgInitialize(intc, intc_cfg,intc_cfg->CpuBaseAddress);
    if (status != XST_SUCCESS)
        return XST_FAILURE;

    Xil_ExceptionInit();
    Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT,(Xil_ExceptionHandler)XScuGic_InterruptHandler,(void *)intc);
    Xil_ExceptionEnable();

    XScuGic_Connect(intc, UART_INT_IRQ_ID, (Xil_ExceptionHandler) uart_intr_handler,(void *) uart_ps);
    XUartPs_SetInterruptMask(uart_ps, XUARTPS_IXR_RXOVR);
    XScuGic_Enable(intc, UART_INT_IRQ_ID);
    return XST_SUCCESS;
}





int main(){
	int status;
	status = uart_init(&Uart_Ps);
    if (status == XST_FAILURE) {
        xil_printf("Uart Initial Failed\r\n");
        return XST_FAILURE;
    }
    uart_intr_init(&intc, &Uart_Ps);


    // Xil_DCacheInvalidateRange((UINTPTR) rx_buffer_ptr, MAX_PKT_LEN);
	Gpiopl_init(&Gpio, AXI_GPIO0_DEV_ID, DATA_DIRECTION_MASK);/*initial PL's AXI GPIO*/

	static XAxiDma axidma;  // 指定变量的存储类别和生命周期  静态存储类别
    XAxiDma_Config *config;
    config = XAxiDma_LookupConfig(DMA_DEV_ID);
    if (!config) {
        xil_printf("No config found for %d\r\n", DMA_DEV_ID);
        return XST_FAILURE;
    }
    status = XAxiDma_CfgInitialize(&axidma, config);
    if (status != XST_SUCCESS) {
        xil_printf("Initialization failed %d\r\n", status);
        return XST_FAILURE;
    }
    status = setup_intr_system(&intc, &axidma, RX_INTR_ID);
    if (status != XST_SUCCESS) {
        xil_printf("Failed intr setup\r\n");
        return XST_FAILURE;
    }
    rx_done = 0;
    error   = 0;



	ip_addr_t ipaddr, netmask, gw;
	unsigned char mac_ethernet_address[] = { 0x00, 0x0a, 0x35, 0x00, 0x01, 0x02 };
	echo_netif = &server_netif;
	init_platform(&intc);            // 初始化 scutimer计时器 ：  XPS_SCU_TMR_INT_ID 29U /* SCU Private Timer interrupt */


	IP4_ADDR(&ipaddr,  192, 168,   1, 10);
	IP4_ADDR(&netmask, 255, 255, 255,  0);
	IP4_ADDR(&gw,      192, 168,   1,  1);

	print_app_header();
	lwip_init();
	if (!xemac_add(echo_netif, &ipaddr, &netmask, &gw, mac_ethernet_address,PLATFORM_EMAC_BASEADDR)) {
		xil_printf("Error adding N/W interface\n\r");
		return -1;
	}

	netif_set_default(echo_netif);

	platform_enable_interrupts();   // 这个跟 Ethernet Link down / Ethernet Link up 有关系
	
	netif_set_up(echo_netif);
	print_ip_settings(&ipaddr, &netmask, &gw);
	start_application();
	while (1) {
		if (TcpFastTmrFlag) {
			tcp_fasttmr();
			TcpFastTmrFlag = 0;
		}
		if (TcpSlowTmrFlag) {
			tcp_slowtmr();
			TcpSlowTmrFlag = 0;
		}
		xemacif_input(echo_netif);
		// transfer_data();
	}
	cleanup_platform();
	return 0;
}



static void rx_intr_handler(void *callback){
    u32 irq_status;
    int timeout;
    XAxiDma *axidma_inst = (XAxiDma *) callback;

    irq_status = XAxiDma_IntrGetIrq(axidma_inst, XAXIDMA_DEVICE_TO_DMA);
    
    XAxiDma_IntrAckIrq(axidma_inst, irq_status, XAXIDMA_DEVICE_TO_DMA);

    if ((irq_status & XAXIDMA_IRQ_ERROR_MASK)) {
        error = 1;
        XAxiDma_Reset(axidma_inst);
        timeout = RESET_TIMEOUT_COUNTER;
        while (timeout) {
            if (XAxiDma_ResetIsDone(axidma_inst))
                break;
            timeout -= 1;
        }
        return;
    }
    if ((irq_status & XAXIDMA_IRQ_IOC_MASK))
        rx_done = 1;
}




static int setup_intr_system(XScuGic * int_ins_ptr, XAxiDma * axidma_ptr, u16 rx_intr_id){
    int status;
    XScuGic_Config *intc_config;
    //1、初始化中断控制器驱动
    intc_config = XScuGic_LookupConfig(INTC_DEVICE_ID);   //初始化中断控制器GIC
    if (NULL == intc_config) {
        return XST_FAILURE;
    }

    status = XScuGic_CfgInitialize(int_ins_ptr, intc_config,intc_config->CpuBaseAddress);
    if (status != XST_SUCCESS) {
        return XST_FAILURE;
    }

    //设置DMA接收通道的中断优先级为0xA0,触发模式为边沿触发(0x3)
    XScuGic_SetPriorityTriggerType(int_ins_ptr, rx_intr_id, 0xA0, 0x3);

    status = XScuGic_Connect(int_ins_ptr, rx_intr_id,(Xil_InterruptHandler) rx_intr_handler, axidma_ptr);
    if (status != XST_SUCCESS) {
        return status;
    }
    // 注册中断处理函数rx_intr_handler,并使能
    XScuGic_Enable(int_ins_ptr, rx_intr_id);

    // 启用来自硬件的中断
    Xil_ExceptionInit();
    Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT,(Xil_ExceptionHandler) XScuGic_InterruptHandler,(void *) int_ins_ptr);
    Xil_ExceptionEnable();

    //  使能DMA的中断
    XAxiDma_IntrEnable(&axidma, XAXIDMA_IRQ_ALL_MASK, XAXIDMA_DEVICE_TO_DMA);
    return XST_SUCCESS;
}




err_t recv_callback(void *arg, struct tcp_pcb *tpcb,struct pbuf *p, err_t err){
	if (!p) {
		tcp_close(tpcb);
		tcp_recv(tpcb, NULL);
		return ERR_OK;
	}

	tcp_recved(tpcb, p->len);  // 通过tcp_recved()通知LWIP已收到的数据。

	if (tcp_sndbuf(tpcb) > p->len) {
		err = tcp_write(tpcb, p->payload, p->len, 1);  // 这里是 echo  TCP_WRITE_FLAG_COPY = 1
        XGpio_DiscreteWrite(&Gpio, 1, 1); //Mask – is the value to be written to the discretes register.  离散寄存器
        XGpio_DiscreteWrite(&Gpio, 1, 0); // 27 * 20ns 的 脉冲
        // uint8_t *rx_buffer_ptr;     // uint8_t类型的指针  指向接收缓冲区的起始地址
        // rx_buffer_ptr = (uint8_t *) RX_BUFFER_BASE;     // 定义好的接收缓冲区的 起始地址常量。  强制类型转换为uint8_t指针类型
        // status = XAxiDma_SimpleTransfer(&axidma, (UINTPTR) rx_buffer_ptr , MAX_PKT_LEN, XAXIDMA_DEVICE_TO_DMA);
        // Xil_DCacheFlushRange((UINTPTR) rx_buffer_ptr, MAX_PKT_LEN);

        // status = 
        // if (status != XST_SUCCESS) {
        //     return XST_FAILURE;
        // }
        
        // for(int i = 0; i < 100; i++) {
        //    xil_printf("%02X ",* (rx_buffer_ptr + i ) );
        // }
	} else    
		xil_printf("no space in tcp_sndbuf\n\r");  // 先判断发送缓冲区是否有足够空间,不够则打印提示。
	pbuf_free(p);
	return ERR_OK;
}



err_t accept_callback(void *arg, struct tcp_pcb *newpcb, err_t err){
	static int connection = 1;
	/* set the receive callback for this connection */
	// 为新接受的连接newpcb设置receive回调函数为recv_callback。
	tcp_recv(newpcb, recv_callback);
	/* just use an integer number indicating the connection id as the callback argument */
	//使用connection变量作为回调参数,通过tcp_arg()关联到newpcb上。
	tcp_arg(newpcb, (void*)(UINTPTR)connection);
	connection++;
	return ERR_OK;
}




int start_application(){
	struct tcp_pcb *pcb;
	err_t err;
	unsigned port = 7;

	pcb = tcp_new_ip_type(IPADDR_TYPE_ANY);
	if (!pcb) {
		xil_printf("Error creating PCB. Out of Memory\n\r");
		return -1;
	}
	err = tcp_bind(pcb, IP_ANY_TYPE, port);
	if (err != ERR_OK) {
		xil_printf("Unable to bind to port %d: err = %d\n\r", port, err);
		return -2;
	}
	tcp_arg(pcb, NULL);
	pcb = tcp_listen(pcb);
	if (!pcb) {
		xil_printf("Out of memory while tcp_listen\n\r");
		return -3;
	}
	tcp_accept(pcb, accept_callback);  /* specify callback to use for incoming connections */  // 等待接收新的连接
	xil_printf("TCP echo server started @ port %d\n\r", port);
	return 0;
}




int Gpiopl_init(XGpio *InstancePtr, u32 DeviceId, u32 DirectionMask){
	int Status;
	Status = XGpio_Initialize(InstancePtr, DeviceId);
	if (Status != XST_SUCCESS) {
		xil_printf("AXI GPIO %d config failed!\r\n", DeviceId);
		return XST_FAILURE;
	}
	XGpio_SetDataDirection(InstancePtr, 1, DirectionMask);
	XGpio_DiscreteClear(InstancePtr, 1, 0);
    return 1;
}



void print_app_header(){
	xil_printf("\n\r\n\r-----lwIP TCP echo server ------\n\r");
}
